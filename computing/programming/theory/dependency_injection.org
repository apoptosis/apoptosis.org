#+title: Dependency Injection

* Motivation

There are two kinds of primitives in our software that often depend, one way or
another, on other code/data:

- Functions
- Classes

There are a few fundamental ways functions and classes can obtain their
dependencies:

- Service Location: it can reach out and grab something in lexical or global scope
- Construction: it can create the dependency itself
- Injection: it can receive the dependency from its caller

In the cases of Service Location and Construction, control is in the hands of
the function or class to obtain its own dependencies.

Injection instead "inverts control", giving it to the caller of the function or
class constructor.

If the function or class depends on an interface (or abstract class) rather
than a concrete class, then the caller is now free to pick and choose which
specific implementations of a dependency to pass in.

** Does that just push the problem onto the caller?

Yeah, it does. We make the caller responsible for providing the dependency (a
sane, reasonable thing to do), but we don't want them doing it either. So we
push the problem onto *their* caller and so on.

The end result is that the construction of all services is pushed to the
program entry-point (a strange, seemingly unreasonable thing to do). Services
are constructed in order, and provided to each other as "injected" (passed in)
dependencies.

This is often called the "compositional root" as now the entire object graph is
being constructed at once.

** OK, but that sounds not great?

The compositional root is the logical inevitability of inversion of
control. Beyond mere strangeness, a more significant consequence is that the
developer must essentially "work out" the topological sort of the object-graph
"by hand". While this moves from mentally challenging to mere tedium with the
help of a statically-typed language, topologically sorting directed graphs is a
thing computers are already proficient at.

* Automatic Dependency Injection

Constructing the object-graph, or "dependency injection", can be automated with
an dependency injection container such as Inversify or ts-syringe. No need to
over complicate this, a container is simply:

- A map from *type* â‡’ "*a way to construct that type*"
- An API for requesting an instance of a mapped type

Most of the container's API consists of ways of saying:

*"bind a type I'll want later, to a way of making that type"*

=container.bind(T).to(wayOfMakingT)=

#+begin_src js
class Bar { }
container.bind(Bar).toConstantValue(new Bar())
const bar1 = container.get(Bar)
const bar2 = container.get(Bar) // same instance
#+end_src

Above, we bind (map) the =Bar= type to "*a way of constructing a* =Bar=" by just
providing a pre-instantiated constant. Every time we request an instance of
=Bar= we just get back the constant instance.

#+begin_src js
container.bind(Bar).to(Bar)
const bar1 = container.get(Bar)
const bar2 = container.get(Bar) // different instance
#+end_src

Above, since =Bar= doesn't have any dependencies (constructor parameters), we can
actually bind (map) it to its own constructor. Now every time a =Bar= is
requested, its constructor is called and a new instance is returned.

#+begin_src js
container.bind(Bar).to(Bar).inSingletonScope()
const bar1 == container.get(Bar)
const bar2 == container.get(Bar) // same instance
#+end_src

The container has a variety of options that make it very flexible. In the above
case, we create a singleton binding so that the construction is memoized.

** What about dependencies?

The power of the container becomes apparent once dependencies come into play:

#+begin_src js
class Bar { }

class Foo {
  constructor(private bar: Bar) { }
}

container.bind(Bar).toSelf() // .bind(T).toSelf() == .bind(T).to(T)
container.bind(Foo).toSelf()

const foo = container.get(Foo) // works
foo.bar // instance of Bar
#+end_src

Notice, we didn't have to explain to the container

- What dependencies that =Foo= has
- How to obtain =Foo='s dependencies

The author of =Foo= merely implements the service, declaring the dependencies,
with the confidence that if =Foo= is ever used, they will be satisfied by the
container. The whole job of passing stuff around has been obviated.

