:PROPERTIES:
:ID:       58265e6d-dae7-4624-b27a-1d0fe63b0aad
:END:
#+title: Rush
#+property: header-args :results output raw silent
#+property: header-args:sh :results output raw silent
#+property: header-args:python :results raw value silent
#+startup: hideblocks

** Community Chat
https://rushstack.zulipchat.com/#all_messages

** How-tos
*** Creating a new Rush monorepo

This section will assist in setting up a new monorepo with [[https://rushjs.io/][Rush]] and [[https://rushstack.io/pages/heft/overview/][Heft]].

Use =C-c C-c= to execute codeblocks and links.

**** Prerequisites
Ensure that you have [[https://nodejs.org/en/][NodeJS]].

Then install [[https://pnpm.io/][pnpm]], [[https://rushjs.io/][Rush]] and [[https://rushstack.io/pages/heft/overview/][Heft]] globally:
#+begin_src sh
  npm install -g pnpm @microsoft/rush @rushstack/heft
#+end_src

**** Start Here
Specify where your monorepo will live with the next two sections.
***** Where do you keep your projects?
#+name: rush-project-root
/home/ldlework/src
***** What's the name of the new monorepo?
#+NAME: rush-monorepo-name
rush-monorepo-test

**** Create new monorepo
Create a new monorepo if it doesn't exist.

#+begin_src sh :var ROOT=rush-project-root NAME=rush-monorepo-name :results output raw
  cd $ROOT
  if [ ! -d $NAME ]
  then
    mkdir $NAME
    cd $NAME
    rush init
  fi
#+end_src

**** Enable PNPM support
[[elisp:(rush-open "rush.json")][Open rush.json]] and uncomment =pnpmVersion=.

**** Adding a new project
Each project goes into a "category" folder. For example:

- =libs/corelib/=
- =apps/cli=

You must then add these projects to =rush.json=:

#+begin_src json
  "projects": [
      {
          "packageName": "corelib",
          "projectFolder": "libs/corelib"
      },
      {
          "packageName": "cli",
          "projectFolder": "apps/cli"
      }
  ]
#+end_src
**** Troubleshooting
***** Resetting the Rush state
#+begin_src sh
  rush update --purge
#+end_src
***** Check dependency homogeny
#+begin_src sh
  rush check
#+end_src
**** utils
#+name: rush-path
#+begin_src python :var FILE="" :var NAME=rush-monorepo-name :var PATH=rush-project-root :return
return f"{PATH.strip()}/{NAME.strip()}/{FILE.strip()}"
#+end_src

#+name: rush-lib
#+begin_src elisp
  (defun rush-copy (file text)
    (let ((text (org-ls-resolve text)))
      (with-temp-file (org-ls-call "rush-path" :FILE file)
        (erase-buffer)
        (insert text))))

  (defun rush-open (file)
    (let ((file (org-ls-call "rush-path" :FILE file)))
      (find-file file)))
#+end_src

#+RESULTS: rush-lib
: rush-open

* utils
#+name: lib
#+begin_src elisp
  (defun org-babel-execute:jsonc (body params)
    "Execute a block of json with org-babel."
    body)

  (defun org-babel-execute:text (body params)
    "Execute a block of text with org-babel."
    body)

  (defun get (prompt)
    (read-string prompt))
#+end_src

# Local Variables:
# eval: (org-ls-call "lib")
# eval: (org-ls-call "rush-lib")
# eval: (progn (org-shifttab)(org-shifttab))
# End:
